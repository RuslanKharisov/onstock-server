import {
  BadRequestException,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import * as bcrypt from 'bcryptjs';
import { User } from '@prisma/client';
import { RegisterDto } from './dto/register.dto';
import { UsersService } from '../users/users.service';
import { JwtTokenService } from './jwt/jwt.service';
import { MailService } from './mail/mail.service';
import { VerificationTokenService } from './verificationToken/verification-token.service';
import { SessionService } from './session/session.service';
import { TwoFactorTokenService } from './two-factor-token.service';
import { TwoFactorConfirmationService } from './two-factor-confirmation.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwtTokenService: JwtTokenService,
    private readonly mailService: MailService,
    private readonly sessionService: SessionService,
    private readonly verificationTokenService: VerificationTokenService,
    private twoFactorTokenService: TwoFactorTokenService,
    private twoFactorConfirmationService: TwoFactorConfirmationService,
  ) {}

  /** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  async register(
    dto: RegisterDto,
  ): Promise<{ success?: string; error?: string }> {
    const { name, email, password } = dto;

    const existingUser = await this.usersService.findOneByEmail(email);
    if (existingUser) {
      return { error: '–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!' };
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await this.usersService.createUser({
      name,
      email,
      password: hashedPassword,
    });

    const verificationToken =
      await this.jwtTokenService.generateVerificationToken(email);

    const existingToken = await this.verificationTokenService.findToken(email);

    if (existingToken) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      const payload = await this.jwtTokenService.verifyToken(existingToken.id);
      if (!payload) {
        await this.verificationTokenService.deleteToken(existingToken.token);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.verificationTokenService.createToken({
      token: verificationToken,
      email,
      expires: new Date(Date.now() + 1000 * 60 * 60 * 1), // —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    });

    const confirmLink = `${process.env.RESEND_CONFIRM_URL}/new-verification?token=${verificationToken}`;

    await this.mailService.sendEmailConfifirmationLink(
      newUser.email,
      confirmLink,
    );

    return {
      success: '–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!',
    };
  }

  /* –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—á—Ç—ã */

  async verifyEmailByToken(
    token: string,
  ): Promise<{ success?: string; error?: string }> {
    console.log('üöÄ ~ AuthService ~ token:', token);
    const existingToken = await this.verificationTokenService.findToken(token);
    console.log('üöÄ ~ AuthService ~ existingToken:', existingToken);
    if (!existingToken) {
      console.log('üöÄ ~ AuthService ~ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫:');
      return { error: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' };
    }
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const payload = await this.jwtTokenService.verifyToken(token);
    if (!payload) {
      return { error: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' };
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
    const existingUser = await this.usersService.findOneByEmail(
      existingToken.email,
    );

    if (!existingUser) {
      return { error: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.usersService.updateUserEmail(
      existingUser.id,
      existingToken.email,
    );

    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await this.verificationTokenService.deleteToken(token);

    return { success: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' };
  }

  /*  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ  */
  async validateUser(
    email: string,
    password: string,
    code?: string,
  ): Promise<any> {
    console.log('üöÄ ~ AuthService ~ code:', code);
    const user = await this.usersService.findOneByEmail(email);
    if (!user) {
      return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º Email –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' };
    }

    /* –ï—Å–ª–∏ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å —Ç–æ–∫–µ–Ω–æ–º */
    if (!user.emailVerified) {
      const verificationToken =
        await this.jwtTokenService.generateVerificationToken(email);
      await this.verificationTokenService.createToken({
        token: verificationToken,
        email: user.email,
        expires: new Date(Date.now() + 1000 * 60 * 60 * 24),
      });
      const confirmLink = `${process.env.RESEND_CONFIRM_URL}/verify-email?token=${verificationToken}`;
      await this.mailService.sendEmailConfifirmationLink(
        user.email,
        confirmLink,
      );

      return { error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.' };
    }

    // –ª–æ–≥–∏–∫–∞ –≤ —Å–ª—É—á–∞–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 2FA.
    if (user.isTwoFactorEnabled && user.email) {
      if (code) {
        const twoFactorToken = await this.twoFactorTokenService.getByEmail(
          user.email,
        );
        if (!twoFactorToken || twoFactorToken.token !== code) {
          throw new BadRequestException('–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π!');
        }

        if (new Date(twoFactorToken.expires) < new Date()) {
          throw new BadRequestException('–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞!');
        }

        await this.twoFactorTokenService.delete(twoFactorToken.id);

        const existingConfirmation =
          await this.twoFactorConfirmationService.getByUserId(user.id);

        if (existingConfirmation) {
          await this.twoFactorConfirmationService.delete(
            existingConfirmation.id,
          );
        }

        await this.twoFactorConfirmationService.createByUserId(user.id);
      } else {
        const existingToken = await this.twoFactorTokenService.getByEmail(
          user.email,
        );

        if (existingToken) {
          await this.twoFactorTokenService.delete(existingToken.id);
        }

        const token = await this.jwtTokenService.generate2FACode();

        const twoFactorToken = await this.twoFactorTokenService.create(
          user.email,
          token.toString(),
        );

        await this.mailService.sendTwoFactorTokenEmail(
          twoFactorToken.email,
          twoFactorToken.token,
        );
        return {
          twoFactor: true,
          success: '–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 2FA –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞!',
        };
      }
    }
    /* –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å */
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return new UnauthorizedException();
    }
    return user;
  }

  /* –õ–æ–≥–∏–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ */
  async login(user: User) {
    // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // const existingSession = await this.sessionService.findSessionByUserId(
    //   user.id,
    // );

    // if (existingSession) {
    //   // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –µ—ë –¥–µ–π—Å—Ç–≤–∏—è
    //   if (this.) {
    //     // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    //     return { sessionToken: existingSession.sessionToken };
    //   } else {
    //     // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
    //     await this.sessionService.deleteSession(existingSession.sessionToken);
    //   }
    // }
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

    return await this.sessionService.createSession(user);
  }

  // async refreshToken(user: User) {

  // }

  /* –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è */
  async sendResetPasswordLink(
    email: string,
  ): Promise<{ success?: string; error?: string }> {
    const user = await this.usersService.findOneByEmail(email);
    if (!user) {
      return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const resetToken = await this.jwtTokenService.generateResetToken(
      user.id,
      user.email,
    );

    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const resetLink = `${process.env.RESEND_CLIENT_URL}/new-password?token=${resetToken}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    await this.mailService.sendResetPasswordLink(user.email, resetLink);

    return { success: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É' };
  }

  /* –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è */
  async resetPassword(
    token: string,
    newPassword: string,
  ): Promise<{ success?: string; error?: string }> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const payload = await this.jwtTokenService.verifyToken(token);
    if (!payload) {
      return { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' };
    }

    const { sub: userId } = payload;

    try {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      this.usersService.updateUserPassword(userId, newPassword);
      return { success: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' };
    } catch (error) {
      console.error(error);
      return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è' };
    }
  }

  async verifySession(sessionToken: string): Promise<boolean> {
    const session = await this.sessionService.findSessionByToken(sessionToken);
    const tokenIsValid = this.jwtTokenService.verifyToken(session.accessToken);
    if (!tokenIsValid) {
      return false;
    }
    return true;
  }
}
